import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

export const apiSlice = createApi({
    // название редьюсера, т.е. все наши данные будут помещены в store.api
    reducerPath: 'api',
    // следующие 2 поля обязательные
    // baseQuery - по факту это метод, или функция, которая будет делать запрос
    // так что здесь можно было бы написать fetch с каким-то адресом, но мы будем использовать встроенный fetch
    // т.к. он содержит некоторые настройки внутри
    baseQuery: fetchBaseQuery({baseUrl: 'http://localhost:3001'}),
    // указываем, какие метки существуют в нашем api
    tagTypes: ['Heroes'], 
    // endpoints - это те операции, которые мы будем проводить по базовому адресу, к примеру, получение данных, отправка данных, удаление или обновление
    // тут будет 2 типа действий: первый - query - запросы, которые получают данные и сохраняют их
    // и второй - mutation - запросы на изменение данных на сервере
    // endpoints в себя принимает функцию (которая автоматически принимает в себя builder), т.е. по факту это метод
    endpoints: builder => ({
        getHeroes: builder.query({
            // базовая настройка - куда именно будем делать запрос
            query: () => '/heroes',
            // указываем, к какой метке относится действие по запросу данных при помощи query
            providesTags: ['Heroes']
        }),
        // мутация, т.к. мы какие-то данные "создаем" на сервере
        createHero: builder.mutation({
            query: hero => ({
                // передаем url, чтобы указать, где именно проводить мутацию
                url: '/heroes',
                method: 'POST',
                // когда мы передаем какой-то body - он АВТОМАТИЧЕСКИ будет переведен в JSON-формат
                body: hero
            }),
            // указываем, что именно загрузить повторно, когда данные по тегу изменились
            invalidatesTags: ['Heroes']
        }),
        deleteHero: builder.mutation({
            query: id => ({
                url: `/heroes/${id}`,
                method: 'DELETE'
            }),
            // подвязываем удаление под запрос, чтобы при удалении персонажа, интерфейс также "обновлялся"
            // т.е. происходил новый запрос на сервер
            invalidatesTags: ['Heroes']
        })
    })
});

// теперь команда api будет автоматически генерировать реакт-хуки на каждое действие 
// название складывается из 'use' + название эндпойнта + тип эндпойта (либо мутация, либо запрос)

// так же надо добавить наш api в главный стор, чтобы там его зарегистрировать
// команда createApi так же создает reducer 
export const { useGetHeroesQuery, useCreateHeroMutation, useDeleteHeroMutation } = apiSlice;